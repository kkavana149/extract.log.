#### Template Script for RTL->Gate-Level Flow (generated from GENUS 19.10-p001_1) 
#this scrips stpes of RTL to gate level synthesis 
source setup.tcl
#source reads a  file  and  runs  the  commands  in  the  fil(scripts).
# it set  designName  "scr1_pipe_top" and set the technology to "45"
set synthDir "synthesis"
# Returns  the  value  of variable synthDir as "synthesis" 

if {![file exists $synthDir]} {
  file mkdir "synthesis"
  puts "Creating directory $synthDir"
}
#will create synthesis directory if not present
# it checks if there is a synthesis directory that exists, if  "Creating directory $synthDir"

catch {cd $synthDir}
#We change  the  current working directory to "synthesis", present in the variable $synthDir
#When we run this command, we get OUTPUT = 0. 


if {[file exists /proc/cpuinfo]} {
  sh grep "model name" /proc/cpuinfo
   sh grep "cpu MHz"    /proc/cpuinfo
} 
#On execution, we get info of 12 model names and cpu clock speed in MHZ
 
#The model refers to  a  MACRO  defined  in  the  LEF library.

puts "Hostname : [info hostname]"
#displays the hostname, 
#OUTPUT: Hostname  present


##############################################################################
## Preset global variables and attributes
##############################################################################


set DESIGN $designName
# We set the design to the variable Design

set GEN_EFF $effort
# We assign the effort to the variable GEN_EFF and the level is low

set MAP_OPT_EFF $effort
# We assign the effort to the variable MAP_OPT_EFF  and the level is low

set DATE [clock format [clock seconds] -format "%b%d-%T"] 
# We set the DATE and get 


set _OUTPUTS_PATH outputs_${DATE}
# We set the variable _OUTPUTS_PATH and write output, "output_Aug22-12:23:09"

set _OUTPUTS_PATH outputs
# We set the variable _OUTPUTS_PATH and display outputs

set _REPORTS_PATH reports
# We set the variable _REPORTS_PATH and display reports

set _LOG_PATH logs
# We assign logs to _LOG_PATH


##set ET_WORKDIR <ET work directory>
#set_db  changes  the  specified  attribute  value  for a database object.

set_db / .init_lib_search_path {.}
#sets init_lib_searcj_path to the current working directory
set_db / .script_search_path {.} 
#sets scripts_search_path to the current working directory
set_db / .init_hdl_search_path {.} 
#sets init_hdl_search_path to the cutz
##OUTPUT: Setting attribute of root '/': 'init_lib_search_path' = .1 .



##Uncomment and specify machine names to enable super-threading.
##set_db / .super_thread_servers {<machine names>} 
##For design size of 1.5M - 5M gates, use 8 to 16 CPUs. For designs > 5M gates, use 16 to 32 CPUs
##set_db / .max_cpus_per_server 8

##Default undriven/unconnected setting is 'none'.  
##set_db / .hdl_unconnected_value 0 | 1 | x | none

set_db / .information_level 7 
# OUTPUT: Setting attribute of root '/': 'information_level' = 7 1 7


###############################################################
## Library setup
###############################################################



if {$designName == "scr1_pipe_top"} {
lappend libFiles ../riscvCoreSyntaCore1/ramInputs/sram_32_1024_max_1p8V_25C.lib
lappend libFiles ../riscvCoreSyntaCore1/ramInputs/i2c_top.lib
lappend libFiles ../riscvCoreSyntaCore1/ramInputs/uart.lib
}
#This command treats the variable given by designName as a list and appends each of the value arguments to that list as a  separate element,  with  spaces  between  elements. #OUTPUT: ../technology/45/lib/max/MEM2_4096X32_slow.lib ../technology/45/lib/max/MEM2_2048X32_slow.lib ../technology/45/lib/max/pdkIO.lib ../technology/45/lib/max/MEM2_512X32_slow.lib ../technology/45/lib/max/MEM2_136X32_slow.lib ../technology/45/lib/max/MEM2_128X16_slow.lib ../technology/45/lib/max/MEM2_1024X32_slow.lib ../technology/45/lib/max/MEM1_4096X32_slow.lib ../technology/45/lib/max/MEM1_256X32_slow.lib ../technology/45/lib/max/MEM1_1024X32_slow.lib ../technology/45/lib/max/slow.lib ../technology/45/lib/max/MEM2_128X32_slow.lib ../riscvCoreSyntaCore1/ramInputs/sram_32_1024_max_1p8V_25C.lib ../riscvCoreSyntaCore1/ramInputs/i2c_top.lib ../riscvCoreSyntaCore1/ramInputs/uart.lib


read_libs  $libFiles
#read_libs reads the libraries.  The  command  will  search  for libraries with the $libFiles.

if {$designName == "scr1_pipe_top"} {
lappend lefFiles ../riscvCoreSyntaCore1/ramInputs/sram_32_1024.lef.bak
lappend lefFiles ../riscvCoreSyntaCore1/ramInputs/i2c_top.lef
lappend lefFiles ../riscvCoreSyntaCore1/ramInputs/uart.lef
}
#This command treats the variable given by designName as a list and appends each of the value arguments to that list as a  separate element,  with  spaces  between  elements. 

read_physical -lef $lefFiles
###The read_physical command corresponds to the Physical step of the Initialization flow.

#During the Physical step, the physical libraries (OA or LEF) are loaded into the tool's database using read_physical. When the  command  is issued,  the  database is loaded with the specified objects, and is available for querying of attributes associated with the physical data, such as size, layer details, and so on.
#According to lef_library, there are total 9 routing layers 
 

## Provide either cap_table_file or the qrc_tech_file
##set_db / .cap_table_file <file> 
##read_qrc <qrcTechFile name>
##generates <signal>_reg[<bit_width>] format
##set_db / .hdl_array_naming_style %s\[%d\] 
## 





### clock gating variable
#set_db / .lp_insert_clock_gating true 

## Power root attributes
#set_db / .lp_clock_gating_prefix <string>
#set_db / .lp_power_analysis_effort <high> 
#set_db / .lp_power_unit mW 
#set_db / .lp_toggle_rate_unit /ns 
## The attribute has been set to default value "medium"

## you can try setting it to high to explore MVT QoR for low power optimization
#set_db / .leakage_power_effort medium 


####################################################################
## Load Design
####################################################################


read_hdl -sv $RTLFile
#read_hdl -sv $RTLFile to loads one or more HDL files in the  order  given  into memory.

elaborate $DESIGN
#elaborate creates a design hierarchy consisting of a top-level design and its referenced subdesigns from Verilog/SystemVerilog  modules  or VHDL  entity/architectures. If the top-level design is not specified, it elaborates all the modules not instantiated by any other module as toplevel and elaborates them all along with their subdesignsops/latches)  inferencing,  and  high-level  HDL  optimizations.  Instances  of  undefined modules/entities are marked as unresolved and the corresponding modules/entities reported  as  blackboxes.   You  can   set  the  attribute hdl_error_on_latch  to  true,  to  error  out for latches inferred during elaborate and set the attribute hdl_error_on_blackbox to true, to error out for blackboxes during elaborate

#The command returns the directory path to the top-level design(s) that it creates.


puts "Runtime & Memory after 'read_hdl'"
#Displays Runtime & Memory after 'read_hdl'

time_info Elaboration
#time_info reports and tracks runtime and memory performance.
###'Elaboration' being created for table 'default'
#Total Time (Wall) |  Stage Time (Wall)  |   % (Wall)   |    Date - Time     |  Memory   | Stage
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
#00:00:04(00:00:00) |  00:00:00(00:00:00) |   0.0(  0.0) |   11:38:43 (Aug22) |  183.6 MB | init
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
 #00:01:05(01:22:55) |  00:01:01(01:22:55) | 100.0(100.0) |   13:01:38 (Aug22) |  392.9 MB | Elaboration
#--------------------+---------------------+--------------+--------------------+-----------+----------------------



check_design -unresolved
#check_design  provides information on undriven and multi-driven ports  and  pins,  unloaded  sequential  elements  and   ports, unresolved  references, constants connected ports and pins, any assign statements and preserved instances in the given  design. In  addition,  the command can report any cells that are not in both .lib and the physical libraries (LEF files).
#### OUTPUT: 
# Check Design Report (c)
#	 ------------------- 
#  Unresolved References & Empty Modules
#  ------------------------------------- 
#No unresolved references in design 'scr1_pipe_top'

#No empty modules in design 'scr1_pipe_top'

# Done Checking the design.



####################################################################
## Constraints Setup
####################################################################

read_sdc $sdcFile
#read_sdc  reads a constraints file in Synopsys Design Constraint (SDC) format into Genus. Genus creates a cost group for each clock defined in the file. It does not create false paths between these clocks.

puts "The number of exceptions is [llength [vfind "design:$DESIGN" -exception *]]"
#DISPLAYS "The number of exceptions is 1"

###########
# upf file read
if {[file exists ../scripts/genus/block.upf]} {
read_power_intent -1801 ../scripts/genus/block.upf -module $DESIGN
#read_power_intent  reads  the  power  intent  for  the module from the specified file(s).In general, the read_power_intent command does not change the netlist. With this command, the basic power attributes are set in the database.

apply_power_intent
#Applies the power intent that was previously read in from power intent file(s).

commit_power_intent
#commit_power_intent inserts level-shifter logic and isolation logic as requested based on the rules specified in previously read  in  power intent file(s).

}
#
###########
#set_db "design:$DESIGN" .force_wireload <wireload name> 

if {![file exists ${_LOG_PATH}]} {
  file mkdir ${_LOG_PATH}
  puts "Creating directory ${_LOG_PATH}"
}
# it checks if there is a _LOG_PATH directory that exists, if not then create the directory and display the message "Creating directory $synthDir"

if {![file exists ${_OUTPUTS_PATH}]} {
  file mkdir ${_OUTPUTS_PATH}
  puts "Creating directory ${_OUTPUTS_PATH}"
}
# it checks if there is a _OUTPUTS_PATH directory that exists, if not then create the directory and display the message "Creating directory $synthDir"

if {![file exists ${_REPORTS_PATH}]} {
  file mkdir ${_REPORTS_PATH}
  puts "Creating directory ${_REPORTS_PATH}"
}
# it checks if there is a _REPORTS_PATH directory that exists, if not then create the directory and display the message "Creating directory $synthDir"

check_timing_intent
#check_timing_intent prints a timing lint report.
# instead indicate that the SDC has potential errors.
##### OUTPUT 
#Lint summary
# Unconnected/logic driven clocks                                  0
# Sequential data pins driven by a clock signal                    1
# Sequential clock pins without clock waveform                     0
# Sequential clock pins with multiple clock waveforms              0
# Generated clocks without clock waveform                          0
# Generated clocks with incompatible options                       0
# Generated clocks with multi-master clock                         0
# Paths constrained with different clocks                          0
# Loop-breaking cells for combinational feedback                   0
# Nets with multiple drivers                                      36
# Timing exceptions with no effect                                 0
# Suspicious multi_cycle exceptions                                0
# Pins/ports with conflicting case constants                       0
# Inputs without clocked external delays                         170
# Outputs without clocked external delays                        103
# Inputs without external driver/transition                      170
# Outputs without external load                                  103
# Exceptions with invalid timing start-/endpoints                  0

#                                                  Total:        583


###################################################################################
## Define cost groups (clock-clock, clock-output, input-clock, input-output)
###################################################################################

## Uncomment to remove already existing costgroups before creating new ones.
## delete_obj [vfind /designs/* -cost_group *]

if {[llength [all_registers]] > 0} { 

#it define_cost_group defines a cost group. The command returns the directory path to the object that it creates.
  define_cost_group -name I2C -design $DESIGN
  define_cost_group -name C2O -design $DESIGN
  define_cost_group -name C2C -design $DESIGN

#path_group  assigns  paths  that meet the path selection criteria to a cost group. Paths can be selected using the -from, -through, -to, or -paths options. You must provide at least one of these four options. The -paths option cannot be used in conjunction with any of the  other three path selection options.
  path_group -from [all_registers] -to [all_registers] -group C2C -name C2C
  path_group -from [all_registers] -to [all_outputs] -group C2O -name C2O
  path_group -from [all_inputs]  -to [all_registers] -group I2C -name I2C
}
#### OUTPUT :- "exception:scr1_pipe_top/I2C"


define_cost_group -name I2O -design $DESIGN
##it define_cost_group defines a cost group. The command returns the directory path to the object that it creates.
 
path_group -from [all_inputs]  -to [all_outputs] -group I2O -name I2O
#path_group  assigns  paths  that meet the path selection criteria to a cost group.

foreach cg [vfind / -cost_group *] {
  report_timing -group [list $cg] >> $_REPORTS_PATH/${DESIGN}_pretim.rpt
  # Generates a timing report of the current design. 
}
###OUTPUT " Computing arrivals and requireds."
#The  foreach command implements a loop where vfind  searches  the  design  hierarchy for the specified types of objects and returns a Tcl list containing the full paths to any matching objects and stores it in variable "cg"







#######################################################################################
## Leakage/Dynamic power/Clock Gating setup.
#######################################################################################

#set_db "design:$DESIGN" .lp_clock_gating_cell [vfind /lib* -lib_cell <cg_libcell_name>]
#set_db "design:$DESIGN" .max_leakage_power 0.0 
#set_db "design:$DESIGN" .lp_power_optimization_weight <value from 0 to 1> 
#set_db "design:$DESIGN" .max_dynamic_power <number> 
## read_tcf <TCF file name>
## read_saif <SAIF file name>
## read_vcd <VCD file name>



#### To turn off sequential merging on the design 
#### uncomment & use the following attributes.
##set_db / .optimize_merge_flops false 
##set_db / .optimize_merge_latches false 
#### For a particular instance use attribute 'optimize_merge_seqs' to turn off sequential merging. 



####################################################################################################
## Synthesizing to generic 
####################################################################################################

set_db / .syn_generic_effort $GEN_EFF
#OUTPUT: Setting attribute of root '/': 'syn_generic_effort' = low 1 low


syn_generic

#syn_generic  takes  an  elaborated  and fully constrained design as input and synthesizes it into a netlist of generic gates by doing high-level RTL and datapath optimization.
#main steps include:

#       * optimization of datapath components (adders, multipliers, shifters,  etc.)  to  implement  arithmetic  modules  that  meet  the  required
#         performance  goal  while  minimizing  area  and  power.  You  can  control  the  global  tradeoff  between  timing  and area by using the
#         dp_analytical_opt attribute. More control over specific datapath transformations is available, please review the relevant  attributes  in
#        the dp category (get_db * -category dp)

#       * implementation of mux structures and choosing their best architecture (binary or one-hot)

#       * using  enable  conditions  in the fanin of registers to implement clockgating logic and thus reducing power. The main attribute to enable
#         this feature is lp_insert_clock_gating (default off), see also related attributes in the lp_cg category for more control

#       * apply retiming to improve overall maximum performance of the design. This technique is applied to all  modules  tagged  with  the  retime
#         attribute. Further control is possible via attributes of the retime category

 #      It  is  recommended  to  use  the check_design command in advance to find major design problems like unresolved modules and multi-driven or
 #      undriven nets or pins. Also the command check_timing_intent helps to identify issues related to the timing constraints read into the tool.

#       If the -physical option is specified, Genus will also place the generic netlist and compute an  initial  congestion  map  based  on  actual
#       global  routing that enables the user to rate the quality of the given floorplan. Top paths are physically optimized, so timing bottlenecks
#       of the design can be identified quickly. The resulting database can be used to analyze congestion and critical path placement  even  before
#       mapping to the technology library. Use the check_floorplan command in advance to ensure the given floorplan data is of high quality.

#       The  effort  of  this  command  is  controlled  via the syn_generic_effort attribute. See its documentation for specific arguments. Use the
#       write_snapshot command to capture relevant metrics after running syn_generic.

#       Large parts of generic optimization are either multi-threaded or  executed  via  partition-based  synthesis,  distributed  across  multiple
#       machines  and/or  CPUs.  By  increasing  the  number  of  CPUs the user can enable Genus to better balance the workload and improve runtime further.


####OUTPUT: 
##>=================== Cadence Confidential (Generic-Logical) ===================
##>Main Thread Summary:
##>----------------------------------------------------------------------------------------
##>STEP                           Elapsed       WNS       TNS     Insts      Area    Memory
##>----------------------------------------------------------------------------------------
##>G:Initial                            0         -         -      5038   6919107       415
##>G:Setup                              0         -         -         -         -         -
##>G:Launch ST                          0         -         -         -         -         -
##>G:Design Partition                   0         -         -         -         -         -
##>G:Create Partition Netlists          0         -         -         -         -         -
##>G:Init Power                         0         -         -         -         -         -
##>G:Budgeting                          0         -         -         -         -         -
##>G:Derenv-DB                          0         -         -         -         -         -
##>G:Debug Outputs                      0         -         -         -         -         -
##>G:ST loading                         0         -         -         -         -         -
##>G:Distributed                        0         -         -         -         -         -
##>G:Timer                              0         -         -         -         -         -
##>G:Assembly                           0         -         -         -         -         -
##>G:DFT                                0         -         -         -         -         -
##>G:Const Prop                         0         -         -      5113   6913633       694
##>G:Misc                              28
##>----------------------------------------------------------------------------------------
##>Total Elapsed                       28
##>========================================================================================
#Info    : Done synthesizing. [SYNTH-2]
#        : Done synthesizing 'scr1_pipe_top' to generic gates.
#        Computing net loads.
#      flow.cputime  flow.realtime  timing.setup.tns  timing.setup.wns  snapshot
#UM:*                                                                   syn_gen

puts "Runtime & Memory after 'syn_generic'"
#Displays "Runtime & Memory after 'syn_generic'

time_info GENERIC
#time_info reports and tracks runtime and memory performance.

###OUTPUT: 
#  Total Time (Wall) |  Stage Time (Wall)  |   % (Wall)   |    Date - Time     |  Memory   | Stage
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
# 00:00:04(00:00:00) |  00:00:00(00:00:00) |   0.0(  0.0) |   11:38:43 (Aug22) |  183.6 MB | init
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
# 00:01:05(01:22:55) |  00:01:01(01:22:55) |  53.6( 68.1) |   13:01:38 (Aug22) |  392.9 MB | Elaboration
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
# 00:01:57(02:01:46) |  00:00:52(00:38:51) |  46.4( 31.9) |   13:40:29 (Aug22) |  690.9 MB | GENERIC
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
#Number of threads: 8 * 1   (id: default, time_info v1.57)
#Info: (*N*) indicates data that was populated from previously saved time_info database
#Info: CPU time includes time of parent + longest thread


report_dp > $_REPORTS_PATH/generic/${DESIGN}_datapath.rpt
#Reports datapath operators that were inferred from the design.

write_snapshot -outdir $_REPORTS_PATH -tag generic
#write_snapshot generates design reports and database snapshots.

###OUTPUT : 
#QoS Summary for scr1_pipe_top
#QoS Summary for scr1_pipe_top
#================================================================================
#Metric                          generic        
#================================================================================
#Slack (ps):                    36,528
#  R2R (ps):                    36,528
#  I2R (ps):                  no_value
#  R2O (ps):                  no_value
#  I2O (ps):                  no_value
#  CG  (ps):                  no_value
# TNS (ps):                           0
#  R2R (ps):                         0
#  I2R (ps):                  no_value
#  R2O (ps):                  no_value
#  I2O (ps):                  no_value
#  CG  (ps):                  no_value
#Failing Paths:                      0
#Cell Area:                  6,897,818
#Total Cell Area:            6,897,818
#Leaf Instances:                 5,113
#Total Instances:                5,113
#Utilization (%):                 0.00
#Tot. Net Length (um):        no_value
#Avg. Net Length (um):        no_value
#Route Overflow H (%):        no_value
#Route Overflow V (%):        no_value
#MBCI(%) (bits/gate) :            0.00
#Norm Cong Hotspot Area:
#  Max Cong:                  no_value
#  Tot Cong:                  no_value
#================================================================================
#CPU  Runtime (h:m:s):        00:31:58
#Real Runtime (h:m:s):        02:34:41
#CPU  Elapsed (h:m:s):        00:32:02
#Real Elapsed (h:m:s):        02:34:43
#Memory (MB):                  1289.47
#================================================================================
#================================================================================
#Flow Settings:
#================================================================================
#Total Runtime (h:m:s): 02:34:41
#Total Memory (MB):     1289.47
#Executable Version:    20.11-s111_1
#================================================================================
#Total Cell Area =  Cell Area + Physical Cell Area
#Total Instances =  Leaf Instances + Physical Instances


#Info   : ACTP-0009 [ACTPInfo] Activity Propagation Progress Report :   0%   1%   2%   3%   4%   5%   6%   7%   8%   9%  10%  11%  12%  13%  14%  15%  16%  17%  18%  19%  20%  21%  22%  23%  24%  25%  26%  27%  28%  29%  30%  31%  32%  33%  34%  35%  36%  37%  38%  39%  40%  41%  42%  43%  44%  45%  46%  47%  48%  49%  50%  51%  52%  53%  54%  55%  56%  57%  58%  59%  60%  61%  62%  63%  64%  65%  66%  67%  68%  69%  70%  71%  72%  73%  74%  75%  76%  77%  78%  79%  80%  81%  82%  83%  84%  85%  86%  87%  88%  89%  90%  91%  92%  93%  94%  95%  96%  97%  98%  99% 100%
#Info   : ACTP-0001 Activity propagation ended for stim#0
#Info   : PWRA-0001 [PwrInfo] compute_power effective options 
#       : -mode : vectorless
#       : -skip_propagation : 1
#       : -frequency_scaling_factor : 1.0
#       : -use_clock_freq : stim
#       : -stim :/stim#0
#       : -fromGenus : 1


report_summary -directory $_REPORTS_PATH
#Generates a summary table which includes various QoS numbers for various stages in the Genus flow.


#### Build RTL power models
##build_rtl_power_models -design $DESIGN -clean_up_netlist [-clock_gating_logic] [-relative <hierarchical instance>]
#report power -rtl



####################################################################################################
## Synthesizing to gates
####################################################################################################


set_db / .syn_map_effort $MAP_OPT_EFF
#OUTPUT: Setting attribute of root '/': 'syn_map_effort' = low 1 low

syn_map
#syn_map  maps  a  design  from generic gates to a technology library while optimizing for best performance, power and area. Genus evaluates
#       multiple implementations for a given logic cone and chooses the one that meets timing constraints while minimizing area and power. After an
#       initial  mapping  phase,  further  refinement  is  done by incrementally optimizing the netlist to recover area and power while maintaining
#       timing.

#Main steps include:

#       * Structuring and mapping of generic logic to meet specified goals. Certain features of optimization can be controlled via attributes,  for
#         a full list of these refer to the opt category (get_db * -category opt)

#       * Selective ungrouping of modules to improve optimization for best timing or area. This can be controlled via the auto_ungroup attribute

#       * Optimizing for leakage and dynamic power. The effort spent on reducing leakage power is specified via the leakage_power_effort attribute,
#         see its description for details. By default, Genus does not optimize for power

#       * Mapping of single-bit to multi-bit library cells. By default this feature is turned off, it can be  enabled  via  the  use_multibit_cells
#         attribute

#       The  library  cell  set  available  to  the  mapper  can  be  restricted  by applying the dont_use attribute to library cell objects. It is
#       recommended to only apply this attribute in case certain library elements are not allowed to be used under  no  circumstances  and  not  as
#       overall guidance to the mapping engine.

#       If  the -physical option is specified, Genus will do physical-aware mapping and restructuring of logic to account for physical effects like
#       long wires in the design. Placement locations of registers are maintained throughout mapping to allow for physical-aware multi-bit  merging
#       of  flip  flops and physical-aware scan insertion post syn_map. It is a prerequisite to run physical-aware mapping that syn_generic was run
#       in physical mode, too.

#       The effort of this command is controlled via  the  syn_map_effort  attribute.  See  its  documentation  for  specific  arguments.  Use  the
#       write_snapshot command to capture relevant metrics after running syn_map.

#       Large  parts  of  mapping  are either multi-threaded or executed via partition-based synthesis, distributed across multiple machines and/or
#       CPUs. By increasing the number of CPUs the user can enable Genus to better balance the workload and improve runtime further.

### OUTPUT :
##>=================== Cadence Confidential (Mapping-Logical) ===================
##>Main Thread Summary:
##>----------------------------------------------------------------------------------------
##>STEP                           Elapsed       WNS       TNS     Insts      Area    Memory
##>----------------------------------------------------------------------------------------
##>M:Initial                            0         -         -      5113   6913633       691
##>M:Pre Cleanup                        0         -         -      5113   6913633       691
##>M:Setup                              0         -         -         -         -         -
##>M:Launch ST                          0         -         -         -         -         -
##>M:Design Partition                   0         -         -         -         -         -
##>M:Create Partition Netlists          0         -         -         -         -         -
##>M:Init Power                         0         -         -         -         -         -
##>M:Budgeting                          0         -         -         -         -         -
##>M:Derenv-DB                          0         -         -         -         -         -
##>M:Debug Outputs                      0         -         -         -         -         -
##>M:ST loading                         0         -         -         -         -         -
##>M:Distributed                        0         -         -         -         -         -
##>M:Timer                              0         -         -         -         -         -
##>M:Assembly                           0         -         -         -         -         -
##>M:DFT                                0         -         -         -         -         -
##>M:DP Operations                      1         -         -      2499   6904450       697
##>M:Const Prop                         0     20118         0      2499   6904450       697
##>M:Cleanup                            0     20109         0      2490   6904428       697
##>M:MBCI                               0         -         -      2490   6904428       697
##>M:Const Gate Removal                 0         -         -         -         -         -
##>M:Misc                               9
##>----------------------------------------------------------------------------------------
##>Total Elapsed                       10
##>========================================================================================
#Info    : Done mapping. [SYNTH-5]
#        : Done mapping 'scr1_pipe_top'.




puts "Runtime & Memory after 'syn_map'"
#DISPLAYS Runtime & Memory after 'syn_map'

time_info MAPPED
#time_info reports and tracks runtime and memory performance.

###OUTPUT :
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
# 00:02:20(02:15:52) |  00:00:23(00:14:06) |  16.9( 10.4) |   13:54:35 (Aug22) |  696.6 MB | MAPPED
#--------------------+---------------------+--------------+--------------------+-----------+----------------------


write_snapshot -outdir $_REPORTS_PATH -tag map
report_summary -directory $_REPORTS_PATH
report_dp > $_REPORTS_PATH/map/${DESIGN}_datapath.rpt
#We get all the reports and save the snapshot in the REPORTS

#OUTPUT :
#Working Directory = /home/cadence/DATABASE/pdTraining/synthesis
#QoS Summary for scr1_pipe_top
#================================================================================
#Metric                          generic         map            
#================================================================================
#Slack (ps):                    36,528          20,109
#  R2R (ps):                    36,528          20,109
#  I2R (ps):                  no_value        no_value
#  R2O (ps):                  no_value        no_value
#  I2O (ps):                  no_value        no_value
#  CG  (ps):                  no_value        no_value
#TNS (ps):                           0               0
#  R2R (ps):                         0               0
#  I2R (ps):                  no_value        no_value
#  R2O (ps):                  no_value        no_value
#  I2O (ps):                  no_value        no_value
#  CG  (ps):                  no_value        no_value
#Failing Paths:                      0               0
#Cell Area:                  6,897,818       6,904,429
#Total Cell Area:            6,897,818       6,904,429
#Leaf Instances:                 5,113           2,490
#Total Instances:                5,113           2,490
#Utilization (%):                 0.00            0.00
#Tot. Net Length (um):        no_value        no_value
#Avg. Net Length (um):        no_value        no_value
#Route Overflow H (%):        no_value        no_value
#Route Overflow V (%):        no_value        no_value
#MBCI(%) (bits/gate) :            0.00            0.00
#Norm Cong Hotspot Area:
#  Max Cong:                  no_value        no_value
#  Tot Cong:                  no_value        no_value
#================================================================================
#CPU  Runtime (h:m:s):        00:31:58        00:30:29
#Real Runtime (h:m:s):        02:34:41        00:42:26
#CPU  Elapsed (h:m:s):        00:32:02        00:32:31
#Real Elapsed (h:m:s):        02:34:43        02:47:09
#Memory (MB):                  1289.47         1339.16
#================================================================================
#================================================================================
#Flow Settings:
#================================================================================
#Total Runtime (h:m:s): 02:47:24
#Total Memory (MB):     1339.16
#Executable Version:    20.11-s111_1
#================================================================================
#Total Cell Area =  Cell Area + Physical Cell Area
#Total Instances =  Leaf Instances + Physical Instances



foreach cg [vfind / -cost_group *] {
  report_timing -group [list $cg] > $_REPORTS_PATH/${DESIGN}_[vbasename $cg]_post_map.rpt
}
##The  foreach command implements a loop where  Generates a timing report of the current design.  vfind  searches  the  design  hierarchy for the specified types of objects and returns a Tcl list containing the full paths to any matching objects and stores it in variable "cg"


write_do_lec -revised_design fv_map -logfile ${_LOG_PATH}/rtl2intermediate.lec.log > ${_OUTPUTS_PATH}/rtl2intermediate.lec.do
#write_do_lec  writes  a  script and verification information that can by used Conformal(R) Logical Equivalence Checking tool to compare the specified golden and revised designs.

###OUTPUT : 
#Info    : Forcing flat compare. [CFM-212]
#        : No hierarchies found in design.
#Info    : Wrote dofile. [CFM-1]
#        : Dofile is 'outputs/rtl2intermediate.lec.do'.
#        : Alias mapping flow is enabled.
#0





## ungroup -threshold <value>

#######################################################################################################
## Optimize Netlist
#######################################################################################################

## Uncomment to remove assigns & insert tiehilo cells during Incremental synthesis
##set_db / .remove_assigns true 
##set_remove_assign_options -buffer_or_inverter <libcell> -design <design|subdesign> 
##set_db / .use_tiehilo_for_const <none|duplicate|unique> 

set_db / .syn_opt_effort $MAP_OPT_EFF
syn_opt
write_snapshot -outdir $_REPORTS_PATH -tag syn_opt
report_summary -directory $_REPORTS_PATH

puts "Runtime & Memory after 'syn_opt'"
time_info OPT
#--------------------+---------------------+--------------+--------------------+-----------+----------------------
# 00:02:37(02:30:55) |  00:00:16(00:15:03) |  11.0( 10.0) |   14:09:38 (Aug22) |  693.6 MB | OPT
#--------------------+---------------------+--------------+--------------------+-----------+----------------------


foreach cg [vfind / -cost_group *] {
  report_timing -group [list $cg] > $_REPORTS_PATH/${DESIGN}_[vbasename $cg]_post_opt.rpt
}



######################################################################################################
## write backend file set (verilog, SDC, config, etc.)
######################################################################################################



report_clock_gating > $_REPORTS_PATH/${DESIGN}_clockgating.rpt
#report_clock_gating reports clock-gating information for the design.

report_power -depth 0 > $_REPORTS_PATH/${DESIGN}_power.rpt
#Reports the power. Use the options to control the content and format of the report.

report_gates -power > $_REPORTS_PATH/${DESIGN}_gates_power.rpt
#  Reports the technology library cells that were implemented (and identifies their originating libraries), the area of  the  cell  instances, and  the  break up of the instances into timing models, sequential cells, integrated clock-gating cells, inverters, buffers, and logic gate cells. Optionally power information can be reported.

#PRINTING ALL THE REPORTS
report_dp > $_REPORTS_PATH/${DESIGN}_datapath_incr.rpt
report_messages > $_REPORTS_PATH/${DESIGN}_messages.rpt
write_snapshot -outdir $_REPORTS_PATH -tag final
report_summary -directory $_REPORTS_PATH
write_hdl  > ${_OUTPUTS_PATH}/${DESIGN}_synth.v
## write_script > ${_OUTPUTS_PATH}/${DESIGN}_m.script
write_sdc > ${_OUTPUTS_PATH}/${DESIGN}_synth.sdc
write_power_intent -1801 -base_name ${_OUTPUTS_PATH}/${DESIGN}_synth
 write_lib_lef -lib ${_OUTPUTS_PATH}/${DESIGN}
#################################
### write_do_lec
#################################

#write_do_lec  writes  a  script and verification information that can by used Conformal(R) Logical Equivalence Checking tool to compare thespecified golden and revised designs.

write_do_lec -golden_design fv_map -revised_design ${_OUTPUTS_PATH}/${DESIGN}_m.v -logfile  ${_LOG_PATH}/intermediate2final.lec.log > ${_OUTPUTS_PATH}/intermediate2final.lec.do
##Uncomment if the RTL is to be compared with the final netlist..
write_do_lec -revised_design ${_OUTPUTS_PATH}/${DESIGN}_m.v -logfile ${_LOG_PATH}/rtl2final.lec.log > ${_OUTPUTS_PATH}/rtl2final.lec.do

puts "Final Runtime & Memory."
time_info FINAL
puts "============================"
puts "Synthesis Finished ........."
puts "============================"

exit
##quit
